name: Create Trello Card for GitHub Issue

on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: read

jobs:
  create-trello-card:
    runs-on: ubuntu-latest

    steps:
      - name: Fetch Issue Details
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: fetch_issue
        run: |
          # Fetch issue details using GitHub API
          ISSUE_DETAILS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}")

          # Extract title and body
          ISSUE_TITLE=$(echo "$ISSUE_DETAILS" | jq -r .title)
          ISSUE_BODY=$(echo "$ISSUE_DETAILS" | jq -r .body)

          # Debug: log the fetched details
          echo "Fetched Issue Title: $ISSUE_TITLE"
          echo "Fetched Issue Body: $ISSUE_BODY"

          # Save ISSUE_TITLE safely to GITHUB_ENV
          echo "ISSUE_TITLE=$ISSUE_TITLE" >> $GITHUB_ENV

          # Handle multi-line or special characters in ISSUE_BODY
          if [ -z "$ISSUE_BODY" ] || [ "$ISSUE_BODY" = "null" ]; then
            echo "ISSUE_BODY=No description provided." >> $GITHUB_ENV
          else
            echo "ISSUE_BODY<<EOF" >> $GITHUB_ENV
            echo "$ISSUE_BODY" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          fi

      - name: Create Trello Card
        env:
          TRELLO_API_KEY: ${{ secrets.TRELLO_API_KEY }}
          TRELLO_TOKEN: ${{ secrets.TRELLO_TOKEN }}
          TRELLO_TODO_LIST_ID: ${{ vars.TRELLO_TODO_LIST_ID }}
          ISSUE_TITLE: ${{ env.ISSUE_TITLE }}
          ISSUE_BODY: ${{ env.ISSUE_BODY }}
        id: create_trello_card
        run: |
          # Ensure ISSUE_BODY is non-empty and clean it
          if [ -z "$ISSUE_BODY" ] || [ "$ISSUE_BODY" = "null" ]; then
            CLEANED_BODY="No description provided."
          else
            # Replace newlines with actual Markdown line breaks
            CLEANED_BODY=$(echo "$ISSUE_BODY" | sed '/<!--/,/-->/d' | sed 's/"/\\"/g; s/\`/\\`/g' | sed ':a;N;$!ba;s/\n/  \n/g')
          fi

          echo "Cleaned Issue Body: $CLEANED_BODY"

          # Create Trello card
          RESPONSE=$(curl -s -X POST "https://api.trello.com/1/cards" \
            -d "name=$ISSUE_TITLE" \
            -d "desc=Created from GitHub Issue: ${{ github.event.issue.html_url }}\n\n$CLEANED_BODY" \
            -d "idList=$TRELLO_TODO_LIST_ID" \
            -d "key=$TRELLO_API_KEY" \
            -d "token=$TRELLO_TOKEN")

          echo "Trello API Response: $RESPONSE"

          # Extract card ID
          CARD_ID=$(echo "$RESPONSE" | jq -r '.id')
          if [ -z "$CARD_ID" ] || [ "$CARD_ID" = "null" ]; then
            echo "Error: Trello card creation failed. Response: $RESPONSE"
            exit 1
          fi

          echo "CARD_ID=$CARD_ID" >> $GITHUB_ENV

      - name: Add Trello Card Link to GitHub Issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CARD_ID: ${{ env.CARD_ID }}
          ISSUE_BODY: ${{ env.ISSUE_BODY }}
        run: |
          # Construct the Trello card link
          CARD_LINK="https://trello.com/c/${CARD_ID}"

          echo "Trello Card Link: $CARD_LINK"

          # Ensure proper formatting of the updated body for the issue
          UPDATED_BODY="${ISSUE_BODY}\n\n[Trello Card](${CARD_LINK})"

          # Properly escape the body to avoid issues with special characters
          UPDATED_BODY_ESCAPED=$(echo "$UPDATED_BODY" | jq -sRr @uri)

          # Update the issue body with the Trello card link
          curl -X PATCH "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.issue.number }}" \
            -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"body\": \"$UPDATED_BODY_ESCAPED\"}"
